import streamlit as st
import pandas as pd
import os
import matplotlib.pyplot as plt
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_experimental.agents import create_pandas_dataframe_agent
import json
import base64
from datetime import datetime

# --- PREFIXO DO AGENTE COM INSTRU√á√ïES DE MEM√ìRIA ---
PREFIXO_AGENTE_MELHORADO = """
Voc√™ √© um agente de an√°lise de dados especialista em Python e Pandas, projetado para ser extremamente met√≥dico e claro.

REGRAS DE OURO PARA O SEU RACIOC√çNIO:
1.  **Pense Passo a Passo:** Antes de escrever qualquer c√≥digo, sempre explique seu plano de a√ß√£o em etapas simples.
2.  **Divida Perguntas Complexas:** Se a pergunta do usu√°rio for ampla, divida-a em partes menores e execute uma de cada vez.
3.  **Pe√ßa Esclarecimentos:** Se uma pergunta for amb√≠gua, pe√ßa ao usu√°rio para esclarecer.
4.  **C√≥digo Simples e Focado:** Gere o c√≥digo Python mais simples e direto poss√≠vel para cada etapa.
5.  **Verifica√ß√£o Inicial √© Obrigat√≥ria:** Para a primeira pergunta, inspecione o dataframe com `df.info()` e `df.head()`.

IMPORTANTE - REGISTRO DE CONCLUS√ïES:
6.  **Ap√≥s cada an√°lise significativa**, voc√™ DEVE gerar uma conclus√£o clara e objetiva sobre o que descobriu.
7.  **Formato da conclus√£o**: Ao final da sua resposta, se voc√™ fez uma an√°lise importante, inclua uma linha come√ßando com "CONCLUS√ÉO:" seguida do insight principal.
8.  **Exemplos de conclus√µes**:
    - "CONCLUS√ÉO: A idade m√©dia dos clientes √© 34 anos, com maior concentra√ß√£o entre 25-40 anos."
    - "CONCLUS√ÉO: H√° uma correla√ß√£o positiva forte (0.85) entre gastos e frequ√™ncia de compras."
    - "CONCLUS√ÉO: O dataset possui 15% de valores ausentes na coluna 'renda', requerendo tratamento."

Agora, comece a interagir com o usu√°rio sobre o dataframe fornecido.
"""

# --- SISTEMA DE MEM√ìRIA ---
class MemoriaAnalise:
    """Gerencia a mem√≥ria de conclus√µes e insights do agente."""
    
    def __init__(self):
        self.conclusoes = []
        self.metadados_dataset = {}
    
    def adicionar_conclusao(self, pergunta, resposta, conclusao):
        """Adiciona uma nova conclus√£o √† mem√≥ria."""
        entrada = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "pergunta": pergunta,
            "resposta": resposta,
            "conclusao": conclusao
        }
        self.conclusoes.append(entrada)
    
    def extrair_conclusao(self, texto_resposta):
        """Extrai a conclus√£o marcada no texto da resposta."""
        linhas = texto_resposta.split('\n')
        for linha in linhas:
            if linha.strip().startswith("CONCLUS√ÉO:"):
                return linha.replace("CONCLUS√ÉO:", "").strip()
        return None
    
    def obter_resumo_conclusoes(self):
        """Retorna um resumo de todas as conclus√µes."""
        if not self.conclusoes:
            return "Nenhuma conclus√£o registrada ainda."
        
        resumo = "üìä **RESUMO DAS CONCLUS√ïES E INSIGHTS:**\n\n"
        for i, entrada in enumerate(self.conclusoes, 1):
            resumo += f"{i}. **{entrada['pergunta']}**\n"
            resumo += f"   üí° {entrada['conclusao']}\n"
            resumo += f"   üïê {entrada['timestamp']}\n\n"
        return resumo
    
    def obter_contexto_para_agente(self):
        """Retorna as conclus√µes em formato para o agente usar como contexto."""
        if not self.conclusoes:
            return ""
        
        contexto = "\n--- CONCLUS√ïES ANTERIORES (para refer√™ncia) ---\n"
        for entrada in self.conclusoes[-5:]:  # √öltimas 5 conclus√µes
            contexto += f"‚Ä¢ {entrada['conclusao']}\n"
        contexto += "--- FIM DAS CONCLUS√ïES ---\n"
        return contexto
    
    def serializar(self):
        """Converte a mem√≥ria para string base64."""
        dados = {
            "conclusoes": self.conclusoes,
            "metadados": self.metadados_dataset
        }
        return base64.b64encode(json.dumps(dados).encode()).decode()
    
    @staticmethod
    def deserializar(string_codificada):
        """Reconstr√≥i a mem√≥ria de uma string base64."""
        if not string_codificada:
            return MemoriaAnalise()
        try:
            dados = json.loads(base64.b64decode(string_codificada.encode()).decode())
            memoria = MemoriaAnalise()
            memoria.conclusoes = dados.get("conclusoes", [])
            memoria.metadados_dataset = dados.get("metadados", {})
            return memoria
        except:
            return MemoriaAnalise()

# --- Fun√ß√µes de serializa√ß√£o do chat ---
def serializar_chat(mensagens):
    if not mensagens:
        return ""
    mensagens_sem_figura = [
        {"role": m["role"], "content": m["content"]} for m in mensagens
    ]
    return base64.b64encode(json.dumps(mensagens_sem_figura).encode()).decode()

def deserializar_chat(string_codificada):
    if not string_codificada:
        return []
    try:
        mensagens_decodificadas = json.loads(base64.b64decode(string_codificada.encode()).decode())
        for m in mensagens_decodificadas:
            m['figure'] = None
        return mensagens_decodificadas
    except:
        return []

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Agente de An√°lise de CSV",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Agente Aut√¥nomo para An√°lise de Dados em CSV")
st.write("Esta aplica√ß√£o utiliza um agente de IA com mem√≥ria persistente para an√°lise de dados.")

def carregar_e_processar_csv(arquivo_csv):
    try:
        df = pd.read_csv(arquivo_csv)
        return df
    except UnicodeDecodeError:
        st.warning("Falha na decodifica√ß√£o UTF-8. Tentando com 'latin1'.")
        arquivo_csv.seek(0)
        df = pd.read_csv(arquivo_csv, encoding='latin1')
        return df
    except Exception as e:
        st.error(f"Erro ao carregar o arquivo CSV: {e}")
        return None

# --- Inicializa√ß√£o do Estado da Sess√£o ---
if 'google_api_key' not in st.session_state:
    st.session_state.google_api_key = None
if 'df' not in st.session_state:
    st.session_state.df = None
if 'agent' not in st.session_state:
    st.session_state.agent = None
if 'memoria' not in st.session_state:
    st.session_state.memoria = MemoriaAnalise()

# Inicializa√ß√£o do chat e mem√≥ria a partir da URL
query_params = st.query_params.to_dict()
if "messages" not in st.session_state:
    try:
        chat_param = st.query_params.get("chat", "")
        st.session_state.messages = deserializar_chat(chat_param)
        
        # Restaura a mem√≥ria da URL tamb√©m
        memoria_param = st.query_params.get("memoria", "")
        st.session_state.memoria = MemoriaAnalise.deserializar(memoria_param)
    except:
        st.session_state.messages = []
        st.session_state.memoria = MemoriaAnalise()

# --- Configura√ß√£o da API Key ---
try:
    st.session_state.google_api_key = st.secrets["GOOGLE_API_KEY"]
    os.environ["GOOGLE_API_KEY"] = st.secrets["GOOGLE_API_KEY"]
except:
    st.sidebar.warning("A chave da API do Google n√£o foi encontrada nos segredos.")
    api_key_input = st.sidebar.text_input("Chave da API do Google", type="password")
    if api_key_input:
        st.session_state.google_api_key = api_key_input
        os.environ["GOOGLE_API_KEY"] = api_key_input
        st.sidebar.success("API Key configurada!")

# --- Barra Lateral ---
with st.sidebar:
    st.header("Upload do Arquivo")
    arquivo_csv = st.file_uploader("Selecione um arquivo CSV", type=["csv"])

    if arquivo_csv is not None and st.session_state.get('uploaded_file_name') != arquivo_csv.name:
        st.session_state.df = carregar_e_processar_csv(arquivo_csv)
        
        if st.session_state.df is not None:
            st.success(f"Arquivo '{arquivo_csv.name}' carregado!")
            st.dataframe(st.session_state.df.head(), use_container_width=True)
            
            st.session_state.uploaded_file_name = arquivo_csv.name
            st.session_state.agent = None
            st.session_state.messages = []
            st.session_state.memoria = MemoriaAnalise()
            st.query_params.clear()
            st.rerun()
    
    # --- NOVA SE√á√ÉO: Visualiza√ß√£o da Mem√≥ria ---
    if st.session_state.memoria.conclusoes:
        st.divider()
        st.header("üß† Mem√≥ria do Agente")
        
        with st.expander(f"üìã Ver Conclus√µes ({len(st.session_state.memoria.conclusoes)})"):
            st.markdown(st.session_state.memoria.obter_resumo_conclusoes())
        
        if st.button("üóëÔ∏è Limpar Mem√≥ria"):
            st.session_state.memoria = MemoriaAnalise()
            st.query_params["memoria"] = ""
            st.success("Mem√≥ria limpa!")
            st.rerun()

# --- L√≥gica Principal ---
if st.session_state.google_api_key and st.session_state.df is not None:
    
    if st.session_state.agent is None:
        st.info("Inicializando o agente de IA com sistema de mem√≥ria...")
        try:
            llm = ChatGoogleGenerativeAI(
                model="gemini-2.5-flash",
                temperature=0,
                convert_system_message_to_human=True,
                api_version="v1"
            )
            st.session_state.agent = create_pandas_dataframe_agent(
                llm=llm,
                df=st.session_state.df,
                agent_type='tool-calling',
                prefix=PREFIXO_AGENTE_MELHORADO,
                verbose=True,
                handle_parsing_errors=True,
                agent_executor_kwargs={"handle_parsing_errors": True},
                allow_dangerous_code=True
            )
            st.success("Agente pronto para conversar!")
        except Exception as e:
            st.error(f"Erro ao criar o agente: {e}")
            st.stop()

    st.header("Converse com seus Dados")

    if not st.session_state.messages:
        st.session_state.messages.append({
            "role": "assistant", 
            "content": "Ol√°! Sou seu assistente de an√°lise de dados com mem√≥ria persistente. Posso lembrar de todas as conclus√µes que tiramos juntos! O que voc√™ gostaria de saber?",
            "figure": None
        })

    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if "figure" in message and message["figure"] is not None:
                st.pyplot(message["figure"])

    if prompt := st.chat_input("Fa√ßa sua pergunta sobre os dados..."):
        
        # Detecta se o usu√°rio est√° perguntando sobre conclus√µes anteriores
        palavras_chave_memoria = ["conclus√µes", "conclusoes", "insights", "descobrimos", "aprendemos", "resumo", "an√°lises anteriores"]
        pergunta_sobre_memoria = any(palavra in prompt.lower() for palavra in palavras_chave_memoria)
        
        if pergunta_sobre_memoria and st.session_state.memoria.conclusoes:
            # Responde diretamente com o resumo da mem√≥ria
            st.session_state.messages.append({"role": "user", "content": prompt})
            resposta_memoria = st.session_state.memoria.obter_resumo_conclusoes()
            st.session_state.messages.append({"role": "assistant", "content": resposta_memoria, "figure": None})
            
            st.query_params["chat"] = serializar_chat(st.session_state.messages)
            st.query_params["memoria"] = st.session_state.memoria.serializar()
            st.rerun()
        
        else:
            # An√°lise normal com o agente
            st.session_state.messages.append({"role": "user", "content": prompt})
            st.query_params["chat"] = serializar_chat(st.session_state.messages)

            with st.chat_message("user"):
                st.markdown(prompt)

            with st.chat_message("assistant"):
                with st.spinner("O agente est√° pensando..."):
                    try:
                        plt.close('all')
                        
                        # Adiciona contexto de conclus√µes anteriores
                        prompt_com_contexto = st.session_state.memoria.obter_contexto_para_agente() + prompt
                        
                        chat_history = [{"role": m["role"], "content": m["content"]} for m in st.session_state.messages]
                        response = st.session_state.agent.invoke({"input": prompt_com_contexto, "chat_history": chat_history})
                        output_text = response["output"]
                        
                        # Extrai e armazena conclus√£o
                        conclusao = st.session_state.memoria.extrair_conclusao(output_text)
                        if conclusao:
                            st.session_state.memoria.adicionar_conclusao(prompt, output_text, conclusao)
                            # Remove a linha "CONCLUS√ÉO:" da resposta exibida
                            output_text = output_text.replace(f"CONCLUS√ÉO: {conclusao}", "").strip()
                        
                        fig = plt.gcf()
                        has_plot = any(ax.has_data() for ax in fig.get_axes()) if fig else False

                        if has_plot:
                            st.pyplot(fig)
                            st.session_state.messages.append({"role": "assistant", "content": output_text, "figure": fig})
                        else:
                            plt.close(fig)
                            st.markdown(output_text)
                            st.session_state.messages.append({"role": "assistant", "content": output_text, "figure": None})
                        
                        # Mostra notifica√ß√£o de nova conclus√£o
                        if conclusao:
                            st.info(f"üí° Nova conclus√£o registrada: {conclusao}")

                    except Exception as e:
                        error_message = f"Ocorreu um erro: {e}"
                        st.error(error_message)
                        st.session_state.messages.append({"role": "assistant", "content": error_message, "figure": None})
            
            # Atualiza URL com chat e mem√≥ria
            st.query_params["chat"] = serializar_chat(st.session_state.messages)
            st.query_params["memoria"] = st.session_state.memoria.serializar()

else:
    st.info("Por favor, configure a API Key e fa√ßa o upload de um arquivo CSV na barra lateral para come√ßar.")